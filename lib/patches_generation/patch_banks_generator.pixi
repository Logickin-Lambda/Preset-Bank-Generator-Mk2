// can't avoid duplication because it is how pixilang handles string
// Don't try to refactor all the functions that look like this, 
// or the sysmtem will ended up broken due to every string pointing to the same instance,
// instead of creating a new instance like other common languages like java, python or c++.

fn /*string*/ get_patch_bank_temp_location (){
    $patch_card_temp_location = ""
    $patch_card_temp_location[0] = 0

    sprintf($patch_card_temp_location, "%s/%s", CURRENT_PATH, "template/Logickin Patch Bank.sunsynth")

    ret ($patch_card_temp_location)
}

fn /*string*/ get_patch_bank_surface_logic_location (){
    $patch_bank_surface_logic_location = ""
    $patch_bank_surface_logic_location[0] = 0

    sprintf($patch_bank_surface_logic_location, "%s/%s", CURRENT_PATH, "template/Logickin Patch Bank Surface Logic Temp.sunvox")

    ret ($patch_bank_surface_logic_location)
}

fn /*string*/ clear_sunvox_for_patch_banks (){
    $patch_bank_surface_logic_location = ""
    $patch_bank_surface_logic_location[0] = 0

    sprintf($patch_bank_surface_logic_location, "%s/%s", CURRENT_PATH, "template/Empty Project.sunvox")

    ret ($patch_bank_surface_logic_location)
}

/**********************************************************************************************
 * This is the only function that should be called externally.
 * Generate patch banks for each modules
 *
 * Input:
 *   - $app_setting     : Application setting container
 *   - $module_vec      : Vector of module
 * Output:
 *   - Result: Err if the template is missing; else Ok
 *
 **********************************************************************************************/

/*pub*/ fn /*retuslt<Ok, Err>*/ generate_patch_banks ($app_setting, $module_vec){

    logf("Export Mode: %d\n", $app_setting.export_as)
    if $app_setting.export_as == SETTING_EXPORT_CARDS{
        ret(Ok(new()))
    }

    // $patch_bank_temp_location           = get_patch_bank_temp_location ()
    // $patch_bank_surface_logic_location  = get_patch_bank_surface_logic_location ()

    // Calculate the total module count, to find the optimal preset count for each bank
    // it must be either 6, or multiple of 12
    $bank_size = cal_module_cnt_for_bank ($module_vec)

    // logf("$bank_margin: %d \n", $bank_size.bank_margin)
    // logf("$patch_cnt  : %d \n", $bank_size.patch_cnt)
    // logf("$bank_cnt   : %d \n", $bank_size.bank_cnt)

    build_core_storage_template($bank_size, $module_vec)

    for ($i = 0; $i < $bank_size.bank_cnt; $i + 1){
        save_command_into_core_logic_as_temp($bank_size, $i, $module_vec)
        generate_surface_logic_for_individual_banks($app_setting, $bank_size, $i, $module_vec)
        export_bank( $app_setting, $i, $module_vec)
    }

    // save the preset bank as a sunvox project
    $patch_bank_name    = ""
    $patch_bank_name[0] = 0
    sprintf($patch_bank_name, "%s/%s %s", $app_setting.output_path, $app_setting.export_entity_name, "Patch Banks.sunvox")
    sv_save( sv_mod_bank_xprt, $patch_bank_name );

    ret(Ok(new()))
}

/**********************************************************************************************
 * Finding the optimal size for each bank, to prevent highly unbalanced preset count in multiple banks:
 *   e.g: to prevent a situation when one bank has 120 presets, 
 *        but another one only has 1 if the total preset count is 121
 *
 * - if there are less than 6 patches, the minimal bank size is 6
 * - if there are less than 120 patches, the bank size will be the nearest x * 12 number of patches
 * - if threr are more than 120 patches, the function will find the minimal number of banks, 
 *   then evenly distribute to the multiples banks with the nearest number of x * 12
 * 
 * Input:
 *   - $module_vec: The controllers data extracted from the sunsynths in module_extractor.pixi
 * 
 * Output:
 *   - $bank_size: objects of three integer counters: bank_cnt, bank_margin, patch_cnt
 *                 - bank_cnt    : number of preset banks required 
 *                 - bank_margin : minimal size bank size that is 6 or x * 12
 *                 - patch_cnt   : the number of patches for each bank
 *
 **********************************************************************************************/
fn /*$bank_size*/ cal_module_cnt_for_bank ($module_vec){

    $total_module_cnt = $module_vec.size
    $bank_size = new()
    $bank_size.bank_cnt     = MIN_BANK_CNT      // 1
    $bank_size.bank_margin  = MIN_BANK_MARGIN   // 6
    $bank_size.patch_cnt    = MIN_PATCH_CNT     // 6

    // Smallest preset bank size
    if $total_module_cnt <= MIN_PATCH_CNT {
        $bank_size.patch_cnt = $total_module_cnt
        ret ($bank_size)
    }

    // No partition required if the total module can fit under a single bank
    if $total_module_cnt <= MAX_BANK_SIZE {
        $bank_size.bank_margin = ceil($total_module_cnt / EFF_BANK_MARGIN) * EFF_BANK_MARGIN
        $bank_size.patch_cnt   = $total_module_cnt
        ret ($bank_size)
    }

    // Attempt to distribute preset into multiple bank evenly
    $bank_cnt    = ceil($total_module_cnt / MAX_BANK_SIZE)
    $patch_cnt   = ceil($total_module_cnt / $bank_cnt)
    $bank_margin = ceil($patch_cnt / EFF_BANK_MARGIN) * EFF_BANK_MARGIN

    $bank_size.bank_cnt     = $bank_cnt
    $bank_size.bank_margin  = $bank_margin
    $bank_size.patch_cnt    = $patch_cnt 

    ret ($bank_size)
}

/**********************************************************************************************
 * generate common structures used for the patch bank, based on the number of presents in a single bank
 *
 * Input:
 *   - $bank_size  : objects of three integer counters: bank_cnt, bank_margin, patch_cnt
 *   - $bank_idx   : if it ended up splitting multiple banks, each bank has a unique index for fetching content from the module vector
 *   - $module_vec : The controllers data extracted from the sunsynths in module_extractor.pixi
 *
 **********************************************************************************************/
fn /*void*/ build_core_storage_template($bank_size, $module_vec) {
    // build a common core storage structure template for the preset bank
    generate_empty_patterns_for_core_storage($bank_size, $module_vec)
    generate_modules_for_core_logic($bank_size, $module_vec)

    $patch_bank_temp_name    = ""
    $patch_bank_temp_name[0] = 0
    sprintf($patch_bank_temp_name, "%s%s", CURRENT_PATH, "process temp/bank base core temp.sunvox")

    sv_set_name(sv_mod_bank_core, "Preset Bank Core")
    sv_save( sv_mod_bank_core, $patch_bank_temp_name );
}

/**********************************************************************************************
 * generate blend patterns for the patch bank.
 * Based on the number of controllers, it generate 4 pattern at most.
 * The first 1 - 3 patterns are for data storage, up to 96 tracks;
 * the last pattern is a stopper to ensure the patch can only plays one line at the time.
 *
 * Input:
 *   - $bank_size  : objects of three integer counters: bank_cnt, bank_margin, patch_cnt
 *   - $bank_idx   : if it ended up splitting multiple banks, each bank has a unique index for fetching content from the module vector
 *   - $module_vec : The controllers data extracted from the sunsynths in module_extractor.pixi
 *
 **********************************************************************************************/
fn /*void*/ generate_empty_patterns_for_core_storage($bank_size, $module_vec) {
    sv_lock( sv_mod_bank_core )
    
    // generate empty patch storage patterns
    $controler_cnt = $module_vec.desc.size
    $y_location    = 0

    for($i = $controler_cnt; $i > 0; $i - MAX_TRACK_SIZE){

        $track_size = MAX_TRACK_SIZE

        if $i < MAX_TRACK_SIZE {
            $track_size = $i
        }

        sv_new_pattern(sv_mod_bank_core, NO_CLONE_FROM_PREV, 0, $y_location, $track_size, $bank_size.bank_margin, 0, "PATCH")

        $y_location + PATTERN_Y_OFFSET
    }

    // generate empty stopper pattern
    $stopper_sts = sv_new_pattern(sv_mod_bank_core, NO_CLONE_FROM_PREV, 0, $y_location, 2, $bank_size.bank_margin, 0, "STOPPER")

    //logf("Stopper pattern status: %d\n", $stopper_sts)

    sv_unlock( sv_mod_bank_core )
}

/**********************************************************************************************
 * Genreate all the required modules in the core logic of a patch card, with all the required setting;
 * module 1 - n are the vel2ctl that used for sending control signal to the target module,
 * while module n + 1 is a multisynth for sending a signal for all vel2ctls
 *
 * Input:
 *   - $bank_size  : objects of three integer counters: bank_cnt, bank_margin, patch_cnt
 *   - $bank_idx   : if it ended up splitting multiple banks, each bank has a unique index for fetching content from the module vector
 *   - $module_vec : The controllers data extracted from the sunsynths in module_extractor.pixi
 *
 **********************************************************************************************/
fn generate_modules_for_core_logic($bank_size, $module_vec){

    // get the location of the output module
    $module_coordinates = sv_get_module_xy(sv_mod_bank_core, OUTPUT_MODULE_ID)  // 0 is always the output module
    $x_ini = ( $module_coordinates                     & LOW_WORD_MASK ) + X_POS_OFFSET
    $y_ini = (($module_coordinates >> WORD_SIZE_SHIFT) & LOW_WORD_MASK )

    // if the module type is metamodule, add the offset for the controller
    $ctrl_offset = 0
    if strcmp( $module_vec.type, TYPE_METAMODULE ) == 0{
        $ctrl_offset = META_CTRL_OFFSET
    }

    // construct all vel2ctls based on the input, expected at least one preset, 
    // or it will rejected by the validation before this function call
    $target_controller_vec  = vec_new(INT32)
    $module_id_vec          = vec_new(INT32)
    $ctrl_cnt               = $module_vec.desc.size

    logf ("control count: %d\n", $ctrl_cnt)
    
    for ($i = 0; $i < $ctrl_cnt; $i + 1){
        $x = $x_ini + (floor($i / ROWS_PER_COL) * X_POS_OFFSET)
        $y = $y_ini + (floor($i % ROWS_PER_COL) * Y_POS_OFFSET)

        sv_lock( sv_mod_bank_core )
        
        $module_id = sv_new_module(sv_mod_bank_core, TYPE_VEL2CTL, $module_vec.desc[$i], $x, $y )
        sv_connect_module(sv_mod_bank_core, $module_id, OUTPUT_MODULE_ID)

        sv_unlock( sv_mod_bank_core )

        // The magic number 1 must be used because controller index and target controller are offset by one,
        // but it is not worth to create a constant because this magic number is only used once in the whole system
        $target_controller = $module_vec.ctrl_id[$i] + 1 //$i + $ctrl_offset + 1
        sv_set_module_ctl_value( sv_mod_bank_core, $module_id, VEL2CTL_TARGET_CTRL, $target_controller, REAL_VALUE_SCALE )

        $target_controller_vec.push($target_controller_vec, $target_controller)
        $module_id_vec.push($module_id_vec, $module_id)
    }

    for ($i = 0; $i < $ctrl_cnt; $i + 1){

        $current_ctrl_value = 0

        // have to use a spin lock here; otherwise, sv_set_module_ctl_value don't have enough time to
        // set all the ctrls before saving the sunvox project
        while ($current_ctrl_value != $target_controller_vec[$i]) {
            $current_ctrl_value = sv_get_module_ctl_value(sv_mod_bank_core, $module_id_vec[$i], VEL2CTL_TARGET_CTRL, REAL_VALUE_SCALE )
            sleep(SPINLOCK_WAIT_TIME) // sleep is applied, hopefully this can reduce the CPU usage
        } 
    }

    remove($target_controller_vec)
    remove($module_id_vec)

    // create a multisynth to trigger all velocity2ctls
    sv_lock( sv_mod_bank_core )

    $x = $x_ini + (ceil($ctrl_cnt / ROWS_PER_COL) * X_POS_OFFSET)   // Must be at the left to the left most column of the controllers
    $y = $y_ini
    
    $multisynth_id = sv_new_module(sv_mod_bank_core, TYPE_MULTISYNTH, TYPE_MULTISYNTH, $x, $y)

    // first velocity2ctl start at one, and it has $ctrl_cnt number of it, and the sv_new_module generates id sequentially.
    for ($i = 1; $i <= $ctrl_cnt; $i + 1){
        sv_connect_module(sv_mod_bank_core, $multisynth_id, $i)
    }    
    
    sv_unlock( sv_mod_bank_core )
}

/**********************************************************************************************
 * write all the patch data into the patch storage patterns, and write the play module and stop command into the stopper command.
 * The number of patch written is based on the patch_cnt in the $bank_size object
 * Since the core logic has completed after called this function, the function also saves the core logic as a new project
 *
 * Input:
 *   - $bank_size  : objects of three integer counters: bank_cnt, bank_margin, patch_cnt
 *   - $bank_idx   : if it ended up splitting multiple banks, each bank has a unique index for fetching content from the module vector
 *   - $module_vec : The controllers data extracted from the sunsynths in module_extractor.pixi
 *
 **********************************************************************************************/
fn save_command_into_core_logic_as_temp($bank_size, $bank_idx, $module_vec){

    // logf("$bank_margin: %d \n", $bank_size.bank_margin)
    // logf("$patch_cnt  : %d \n", $bank_size.patch_cnt)
    // logf("$bank_cnt   : %d \n", $bank_size.bank_cnt)

    $patch_cnt   = $bank_size.patch_cnt

    $idx_start   = $bank_idx * $patch_cnt
    $idx_end     = ( $bank_idx * $patch_cnt ) + $patch_cnt
    
    // write patch data into patterns
    for ($i = $idx_start; $i < $idx_end; $i + 1){
        write_patch_data_for_single_preset($module_vec[$i], $i)
    }

    // write enable and stopper command for track 0 and 1 respectively
    $stopper_pattern_idx = ceil($module_vec.desc.size / MAX_TRACK_SIZE) // Since pattern ID starts at 0, the number of storage pattern required equals to the stopper pattern ID
    $multisynth_id       = $module_vec.desc.size + 2 // multisynth must be created after all the velocity2ctl, which is the number of ctrl + 2 (output module and the multisynth itself)

    for ($i = 0; $i < $bank_size.bank_margin; $i + 1) {
        sv_set_pattern_event( sv_mod_bank_core, $stopper_pattern_idx, 0, $i, 49, 0x81, $multisynth_id , 0, 0 )
        sv_set_pattern_event( sv_mod_bank_core, $stopper_pattern_idx, 1, $i, 0, 0, 0, 0x30, 0)   // 0x30 = stop command
    }

    // core logic is completed at this point, 
    $patch_bank_temp_name    = ""
    $patch_bank_temp_name[0] = 0
    sprintf($patch_bank_temp_name, "%s%s %d%s", CURRENT_PATH, "process temp/bank core", $bank_idx, ".sunvox")
    sv_save( sv_mod_bank_core, $patch_bank_temp_name );
}

/**********************************************************************************************
 * write one of the preset configuration into one of the line of a pattern
 *
 * Input:
 *   - $module      : Controller data of one of the module from module_vec
 *   - $current_line: the current index of the selected module
 *
 **********************************************************************************************/
fn write_patch_data_for_single_preset($module, $current_line){

    // Write all the patch data into patterns 
    for ($i = 0; $i < $module.ctrls.size; $i + 1){

        $pattern_idx = floor($i / MAX_TRACK_SIZE)
        $track_idx   = floor($i % MAX_TRACK_SIZE)

        // $i + 2 for setting the first velocity2ctl, but not sure why it start at 2
        // 3 << 8 becasue module controller is located at the top two byte of the CCEE column in SunVox
        sv_set_pattern_event( sv_mod_bank_core, $pattern_idx, $track_idx, $current_line, 0, 0, $i + 2, 3 << 8, $module.ctrls[$i] )
    }
}

/**********************************************************************************************
 * generete surface control logic for selecting the playhead of the core logic pattern,
 * so that the presets can be switched in real time.
 *
 * The surface logic temp will be saved as another temp project for the final export 
 *
 * Input:
 *   - $bank_size  : objects of three integer counters: bank_cnt, bank_margin, patch_cnt
 *   - $bank_idx   : if it ended up splitting multiple banks, each bank has a unique index for fetching content from the module vector
 *   - $module_vec : The controllers data extracted from the sunsynths in module_extractor.pixi
 *
 **********************************************************************************************/
fn generate_surface_logic_for_individual_banks($app_setting, $bank_size, $bank_idx, $module_vec){

    sv_load( sv_mod_bank_surf, clear_sunvox_for_patch_banks ())
    sv_load( sv_mod_bank_surf, get_patch_bank_surface_logic_location ())

    create_multisynth_for_preset_selection($bank_size, $bank_idx, $module_vec)
    load_core_logic_into_surface_logic($bank_idx, $module_vec)

    // surface logic is completed at this point, 
    $project_name    = ""
    $project_name[0] = 0
    sprintf($project_name, "%s %s", $app_setting.export_entity_name, "Preset Bank")   
    sv_set_name(sv_mod_bank_surf, $project_name)

    $patch_bank_temp_name    = ""
    $patch_bank_temp_name[0] = 0
    sprintf($patch_bank_temp_name, "%s%s %d%s", CURRENT_PATH, "process temp/bank surf", $bank_idx, ".sunvox")
    sv_save( sv_mod_bank_surf, $patch_bank_temp_name );
}

/**********************************************************************************************
 * Create a bunch of multisynth with different phase offset for select the preset
 *
 * Input:
 *   - $bank_size  : objects of three integer counters: bank_cnt, bank_margin, patch_cnt
 *   - $bank_idx   : if it ended up splitting multiple banks, each bank has a unique index for fetching content from the module vector
 *   - $module_vec : The controllers data extracted from the sunsynths in module_extractor.pixi
 *
 **********************************************************************************************/
fn /*void*/ create_multisynth_for_preset_selection($bank_size, $bank_idx, $module_vec){
    // get the location of the input multisynth module, which is 1 in the surface logic template
    $module_id_vec = vec_new(INT32)
    $phase_vec     = vec_new(INT32)
    $velocity_vec  = vec_new(INT32)

    $module_coordinates = sv_get_module_xy(sv_mod_bank_surf, PATCH_SELECTOR_ID)
    $x_ini = ( $module_coordinates                     & LOW_WORD_MASK ) - (X_POS_OFFSET * 2)
    $y_ini = (($module_coordinates >> WORD_SIZE_SHIFT) & LOW_WORD_MASK )

    for ($i = 0; $i < $bank_size.bank_margin; $i + 1){
        $x = $x_ini + (floor($i / ROWS_PER_COL) * -X_POS_OFFSET)
        $y = $y_ini + (floor($i % ROWS_PER_COL) * -Y_POS_OFFSET)

        sv_lock( sv_mod_bank_surf )
        
        $module_id = sv_new_module(sv_mod_bank_surf, TYPE_MULTISYNTH, $module_vec[$i].name, $x, $y )
        sv_connect_module(sv_mod_bank_surf, PATCH_SELECTOR_ID, $module_id)
        sv_connect_module(sv_mod_bank_surf, $module_id, CORE_METAMODULE_ID)

        sv_unlock( sv_mod_bank_surf )
                
        // The magic number 32768 must be used for evenly split the playhead in the core logic pattern,
        // but it is not worth to create a constant because this magic number is used once only in the whole system
        $multisynth_phase = ceil(32768.0 * $i / $bank_size.bank_margin)
        sv_set_module_ctl_value( sv_mod_bank_surf, $module_id, MULTISYNTH_PHASE, $multisynth_phase, REAL_VALUE_SCALE )

        $module_id_vec.push($module_id_vec, $module_id)
        $phase_vec.push($phase_vec, $multisynth_phase)

        // empty patch will not produce any sound
        if $i >= $bank_size.patch_cnt {
            sv_set_module_ctl_value( sv_mod_bank_surf, $module_id, MULTISYNTH_VELOCITY, 0, REAL_VALUE_SCALE )
            $velocity_vec.push($velocity_vec, 0)
        }else{
            $velocity_vec.push($velocity_vec, -1)
        }
    }

    for ($i = 0; $i < $bank_size.bank_margin; $i + 1){

        // have to use a spin lock here; otherwise, sv_set_module_ctl_value don't have enough time to
        // set all the ctrls before saving the sunvox project
        $current_ctrl_value = 0
        while ($current_ctrl_value != $phase_vec[$i]) {
            $current_ctrl_value = sv_get_module_ctl_value(sv_mod_bank_surf, $module_id_vec[$i], MULTISYNTH_PHASE, REAL_VALUE_SCALE )
            sleep(SPINLOCK_WAIT_TIME) // sleep is applied, hopefully this can reduce the CPU usage
        }
        
        $current_ctrl_value = 0
        while ($current_ctrl_value != $velocity_vec[$i] && $velocity_vec[$i] != -1) {
            $current_ctrl_value = sv_get_module_ctl_value(sv_mod_bank_surf, $module_id_vec[$i], MULTISYNTH_VELOCITY, REAL_VALUE_SCALE )
            sleep(SPINLOCK_WAIT_TIME) // sleep is applied, hopefully this can reduce the CPU usage
        } 
    }
}

/**********************************************************************************************
 * Load the core storage into the core logic metamodule inside the surface logic,
 * and set the playback properties of the core sotrage.
 * 
 * Input:
 *   - $bank_idx   : if it ended up splitting multiple banks, each bank has a unique index for fetching content from the module vector
 *   - $module_vec : The controllers data extracted from the sunsynths in module_extractor.pixi
 *
 **********************************************************************************************/
fn /*void*/ load_core_logic_into_surface_logic($bank_idx, $module_vec){

    // fetch the correct core logic temp into surface logic
    $patch_bank_temp_name    = ""
    $patch_bank_temp_name[0] = 0
    sprintf($patch_bank_temp_name, "%s%s %d%s", CURRENT_PATH, "process temp/bank core", $bank_idx, ".sunvox")

    sv_metamodule_load( sv_mod_bank_surf, CORE_METAMODULE_ID, $patch_bank_temp_name );

    // Sleep function are intended, as spinlocks can be quite CPU intensive, but since sv_set_module_ctl_value() is relatively slow
    // adding sleep don't really slow down the process much and they can reduce CPU usage.

    // set the input module
    $input_module = $module_vec.desc.size + 1 // number of ctrls + output module
    sv_set_module_ctl_value( sv_mod_bank_surf, CORE_METAMODULE_ID, META_CTRL_INPUT, $input_module, REAL_VALUE_SCALE )
    // set the play mode as 1 "on repeat"
    sv_set_module_ctl_value( sv_mod_bank_surf, CORE_METAMODULE_ID, META_CTRL_PLAY_MODE, 1, REAL_VALUE_SCALE )
    // set the BPM to 1000
    sv_set_module_ctl_value( sv_mod_bank_surf, CORE_METAMODULE_ID, META_CTRL_BPM, 1000, REAL_VALUE_SCALE )
    // set the TPL to one
    sv_set_module_ctl_value( sv_mod_bank_surf, CORE_METAMODULE_ID, META_CTRL_TPL, 1, REAL_VALUE_SCALE )

    // grouping all spinlock so that to check them all at once
    while (1) {
        sleep(SPINLOCK_WAIT_TIME)
        
        $current_ctrl_value = sv_get_module_ctl_value(sv_mod_bank_surf, CORE_METAMODULE_ID, META_CTRL_INPUT, REAL_VALUE_SCALE )
        if $current_ctrl_value != $input_module {
            continue
        }

        $current_ctrl_value = sv_get_module_ctl_value(sv_mod_bank_surf, CORE_METAMODULE_ID, META_CTRL_PLAY_MODE, REAL_VALUE_SCALE )
        if $current_ctrl_value != 1 {
            continue
        }

        $current_ctrl_value = sv_get_module_ctl_value(sv_mod_bank_surf, CORE_METAMODULE_ID, META_CTRL_BPM, REAL_VALUE_SCALE )
        if $current_ctrl_value != 1000 {
            continue
        }

        $current_ctrl_value = sv_get_module_ctl_value(sv_mod_bank_surf, CORE_METAMODULE_ID, META_CTRL_TPL, REAL_VALUE_SCALE )
        if $current_ctrl_value != 1 {
            continue
        }

        break
    }
}

/**********************************************************************************************
 * load the surface logic into the preset bank module
 *
 * The surface logic temp will be saved as another temp project for the final export 
 *
 * Input:
 *   - $app_setting     : Application setting container
 *   - $bank_idx   : if it ended up splitting multiple banks, each bank has a unique index for fetching content from the module vector
 *   - $module_vec : The controllers data extracted from the sunsynths in module_extractor.pixi
 *
 **********************************************************************************************/
fn /*void*/ export_bank( $app_setting, $bank_idx, $module_vec){

    // construct preset bank module
    $patch_bank_name    = ""
    $patch_bank_name[0] = 0
    sprintf($patch_bank_name, "%s Bank %c", $app_setting.export_entity_name, 'A' + $bank_idx)

    // get the location of the input output module, which is 0 in the surface logic template
    $module_coordinates = sv_get_module_xy(sv_mod_bank_xprt, OUTPUT_MODULE_ID)
    $x_ini = ( $module_coordinates                     & LOW_WORD_MASK ) + X_POS_OFFSET
    $y_ini = (($module_coordinates >> WORD_SIZE_SHIFT) & LOW_WORD_MASK )

    $x = $x_ini + (floor($bank_idx / ROWS_PER_COL) * X_POS_OFFSET)
    $y = $y_ini + (floor($bank_idx % ROWS_PER_COL) * Y_POS_OFFSET)
    $module_id = sv_load_module( sv_mod_bank_xprt, get_patch_bank_temp_location(), $x, $y, 0 )
    sv_set_module_name( sv_mod_bank_xprt, $module_id, $patch_bank_name )

    // load the surface logic into the bank module
    $patch_bank_temp_name    = ""
    $patch_bank_temp_name[0] = 0
    sprintf($patch_bank_temp_name, "%s%s %d%s", CURRENT_PATH, "process temp/bank surf", $bank_idx, ".sunvox")

    sv_metamodule_load( sv_mod_bank_xprt, $module_id, $patch_bank_temp_name );
}
// *************************************************************************************************************
// Preset bank generator mk2
// 
// We (Acheney and Logickin) decided to make use of pixilang to build a program,
// to provide an eco-system for managing presents, with maximizing the advantage of the preset standards:
// 
// Including:
// - Patch Cards: Inspired by the accipiter preset module, Acheney expended the functionality
//		by adding presents export into their modules, so that user can export their presets
//		into the Acheney preset on the fly.
//
// - Patch Banks: Taking the compression into extreme, Logickin made a former program for
//	 	fitting all the preset data into a pattern, result in a highly compact, BUT immutable
// 		preset bank module. Ideal for user who just want to quickly switching the sound by keypresses.
// 	
// Ultmately, we will merge the two standards into one if SunVox provides update
// like writing into patterns inside metamodules on project play, 
// or supporting pixilang in SunVox, which is not possible at the moment.
//
// *************************************************************************************************************

// pixi file dependencies
include "lib/utils/show_log.pixi"
include "lib/utils/vector.pixi"
include "lib/utils/string_utils.pixi"
include "lib/utils/result_utils.pixi"

include "lib/lkups/app_msgs.pixi"

include "lib/gui/components/color_utils.pixi"
include "lib/gui/components/GUI.pixi"
include "lib/gui/components/button.pixi"
include "lib/gui/components/checkbox.pixi"
include "lib/gui/components/gui_window_frame.pixi"
include "lib/gui/components/text_message.pixi"
include "lib/gui/popup.pixi"
include "lib/gui/preset_converter_options.pixi"
include "lib/gui/preset_converter_pager.pixi"

include "lib/modules_extraction/module_extractor.pixi"

include "lib/validations/preset_converter_options_validator.pixi"

include "lib/models/app_setting.pixi"



// 1. Start of the program, loading config if necessary, and
// Loading any global instance here, this is where SunVox instances and Lookup tables should be located
// Other than that, they should all be local variables

// App messages
APP_MSGS = app_msgs_lkup_new()

// SunVox instances
sv_mod_extr = sv_new()

main() halt 

fn main(){
	// main program, containing:

	// 2. Function calls for front end of the program, drawing the ui or some demoscenes (if necessary)
	$options_gui = construct_preset_converter_options_gui()
	$app_setting = new()

	// Main event loop
	while 1 {
		$app_setting = display_settings_and_validation($options_gui)

		// 3&4. Function calls for file extractions and validations
		// Function calls...

		// 5&6: Function calls for generating and exporting presets
		// Function calls...

		// 7. function calls for front end of the program, drawing the ui or some demoscenes (if necessary)
		// Function calls...

		break; // Temporary, well be removed once other part of the code have completed
	}

	// $file_name = get_file_name_from_input_path($options_gui.gui_comp_lkup.input_path_text_box.children[0].str_full)
	// $file_name = get_file_type_from_input_path($options_gui.gui_comp_lkup.input_path_text_box.children[0].str_full)
	// logf("file name is: %s", $file_name)

	// extr_from_sunvox_project($app_setting.input_path)
	// extr_from_sunvox_project("C:/Users/user/Desktop 2/Simple SunVox Import Test.sunvox")
	
	extr_from_sunvox_project(app_setting_debug_new())

	show_log()	// This is only for debug purpose
}
/**********************************************************************************************
 * public function for other pixi files for creating the required directories for the conversion
 * 
 * Input: 
 *   - $app_setting: the setting users created from the GUI
 *
 * Behaviour:
 *   - Creates process temp directory
 *   - Appends backup timestamp for the older directories with the same name
 *   - Creates a directory based on the user given name in export directory
 * 
 **********************************************************************************************/
fn /*void*/ create_directories_by_setting($app_setting){

    // Construct all related directories
    rename_previously_export_as_backup($app_setting, $app_setting.output_path)
    create_directories_group($app_setting, $app_setting.output_path)
}

/**********************************************************************************************
 * Appends backup timestamp for the older directories with the same name 
 * 
 * Input: 
 *   - $app_setting: the setting users created from the GUI
 *   - $path       : the path where the preset banks are exported
 * 
 **********************************************************************************************/
fn /*void*/ rename_previously_export_as_backup($app_setting, $path) {

    // Build timestamp for folder backup
    $timestamp = ""
    $timestamp[0] = 0

    sprintf($timestamp, "backup_%04d%02d%02d_%02d%02d%02d", get_year(), get_month(), get_day(), get_hours(), get_minutes(), get_seconds())
    logf("timestamp: %s\n", $timestamp)

    $backup_path     = ""
    $backup_path[0]  = 0

    sprintf($backup_path, "%s %s", $path, $timestamp)

    logf("rename old directory: %s\n", $backup_path)

    // Just confirmed rename_file() can be doubled as a rename directory function
    $result = rename_file($path, $backup_path)
    logf("rename old directory %d\n", $result)
}

/**********************************************************************************************
 * Create all the reqired directories for the preset conversion
 * 
 * Input: 
 *   - $app_setting: the setting users created from the GUI
 *   - $path       : the path where the preset banks are exported
 * 
 **********************************************************************************************/
fn /*void*/ create_directories_group($app_setting, $path){

    // create process temp folder if there isn't any
    $process_temp_path    = ""
    $process_temp_path[0] = 0
    sprintf($process_temp_path, "%s/process temp", CURRENT_PATH)

    $process_temp = create_directory($process_temp_path)

    // create export folder
    $root_dir_result = create_directory($path)
    // logf("rename old directory %d\n", $root_dir_result)

    // create folder for patch cards 
    // Save module function is not available in SunVox lib, so I can't save patch cards as separated file
    // Will be unlocked once saving sunsynth is possible

    /*if $app_setting.export_as == SETTING_EXPORT_CARDS || 
       $app_setting.export_as == SETTING_EXPORT_BOTH {

        $patch_cards_path    = ""
        $patch_cards_path[0] = 0

        sprintf($patch_cards_path, "%s/patch cards", $path)

        $root_dir_result = create_directory($patch_cards_path)
    }*/
}
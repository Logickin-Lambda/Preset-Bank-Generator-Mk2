POPUP_INFO      = 0
POPUP_WARNING   = 1
POPUP_ERROR     = 2
POPUP_SUCCESS   = 3
POPUP_PROCESSING= 4
POPUP_WARN_NCB  = 5     // stands for WARNing No Cancel Button

/*********************************************************************************************
 * Construct the popups 
 * 
 * Input: 
 *   - $messages in vector container
 *   - $type (based on constants at the top of this pixi file)
 * Output: 
 *   - GUI container that represents the whole setting page, containing
 * 	   - all the interactive components
 * 	   - a look up table for accessing component simipler, without seeking the array index
 * 	   - additional controller state for customized behaviors 
 * 
 *********************************************************************************************/ 
fn /*popup_object*/ construct_preset_popup ($messages, $type){

    // define the color and the size of the popup
    $color  = COLOR_LIGHT
    $header = "Info" 
    $confirm_button_name = "OK"

    while 1 {
        if $type == POPUP_WARNING {
            $color = COLOR_WARNING
            $header = "Warning"
            $confirm_button_name = "Confirm"
            break

        } /*else*/ if $type == POPUP_WARN_NCB {
            $color = COLOR_WARNING
            $header = "Warning"
            $confirm_button_name = "OK"   
            break

        } /*else*/ if $type == POPUP_ERROR {
            $color = COLOR_DANGER
            $header = "Error"
            $confirm_button_name = "Back"
            break

        } /*else*/ if $type == POPUP_SUCCESS {
            $color = COLOR_SUCCESS
            $header = "Success"
            $confirm_button_name = "OK"
            break

        } /*else*/ if $type == POPUP_PROCESSING{
            $color = COLOR_SECONDARY
            $header = "Processing"
            $confirm_button_name = ""  
            break      
               
        }else {
            break
        }
        
    }

    $row_size = $messages.size

    $popup = GUI_new( -1, //parent
                    -0, -0, //x, y position
                    0, 0, //width, height
                    BLACK, 0, //color, transparency
                    -1 //texture
                    )
    

    // render border
    $popup.children[0] = gui_window_frame_new($popup, 0, 0, 450, 120 + ($row_size * 20), $header, $color)
	$popup.gui_comp_lkup.popup_border = $popup.children[0]

    // render text message
    $popup.children[1] = text_message_new($popup, 0, 0, "", COLOR_LIGHT)
    GUI_add_text($popup.children[1])
    $popup.gui_comp_lkup.popup_border_text = $popup.children[1].str[0]

    $message_log = ""
    $message_log[0] = 0
    for ($i = 0; $i < $messages.size; $i + 1){
        strcat($message_log , $messages[$i])
        strcat($message_log , "\n\n")
    }

    $popup.gui_comp_lkup.popup_border_text.text = $message_log
	$popup.gui_comp_lkup.popup_border_text.x - 200
	$popup.gui_comp_lkup.popup_border_text.y - (10 + ($row_size * 10))
	$popup.gui_comp_lkup.popup_border_text.flags = 0b00000101 
	$popup.gui_comp_lkup.popup_border_text.color = COLOR_LIGHT
    
    while 1 {
        if $type == POPUP_WARNING {
            $popup.children[2] = button_new($popup, 110, 10 + ($row_size * 8), $confirm_button_name, $color)
            $popup.gui_comp_lkup.button_confirm = $popup.children[2]
            
            $popup.children[3] = button_new($popup, 0, 10 + ($row_size * 8), "Cancel", COLOR_SECONDARY)
            $popup.gui_comp_lkup.button_cancel = $popup.children[3]
            break

        } /*else*/ if $type == POPUP_WARN_NCB{
            $popup.children[2] = button_new($popup, 110, 10 + ($row_size * 8), $confirm_button_name, $color)
            $popup.gui_comp_lkup.button_confirm = $popup.children[2]

            break
        } /*else*/ if $type == POPUP_ERROR {
            $popup.children[2] = button_new($popup, 110, 10 + ($row_size * 8), $confirm_button_name, $color)
            $popup.gui_comp_lkup.button_cancel = $popup.children[2]

            $popup.gui_comp_lkup.button_confirm.has_clicked = 0
            break

        } /*else*/ if $type != POPUP_PROCESSING{
            $popup.children[2] = button_new($popup, 110, 10 + ($row_size * 8), $confirm_button_name, $color)
            $popup.gui_comp_lkup.button_confirm = $popup.children[2]

            $popup.gui_comp_lkup.button_cancel.has_clicked = 0
            break

        }
        break
    }





    ret($popup)
}

/*********************************************************************************************
 * Process the behavior of the GUI
 * 
 * Input   : 
 *   - $popup_gui: GUI container
 * behavior: 
 * 	 - callback on button clicks
 * 	 - radio button actions
 * 	 - calling native text editor and file dialogs
 *
 *********************************************************************************************/
fn /*void*/ handle_popup_events($popup_gui){

	$gui_comp = $popup_gui.gui_comp_lkup

    while get_event()
    {
        if EVT[ EVT_TYPE ] == EVT_QUIT { halt }
        $popup_gui.check( $popup_gui ) //call check function
        $popup_gui.evt( $popup_gui ) //call interaction handler

    }
}
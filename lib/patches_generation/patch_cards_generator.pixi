// can't avoid duplication because it is how pixilang handles string
// Don't try to refactor all the functions that look like this, 
// or I will ended up breaking the program due to every string pointing to the same instance,
// instead of creating a new instance like other common languages like java, python or c++.

fn /*string*/ get_patch_card_template_location (){
    $patch_card_template_location = ""
    $patch_card_template_location[0] = 0

    sprintf($patch_card_template_location, "%s/%s", CURRENT_PATH, "template/Acheney Patch Card.sunsynth")

    ret ($patch_card_template_location)
}

fn /*string*/ clear_sunvox_for_patch_cards (){
    $patch_bank_surface_logic_location = ""
    $patch_bank_surface_logic_location[0] = 0

    sprintf($patch_bank_surface_logic_location, "%s/%s", CURRENT_PATH, "template/Empty Project.sunvox")

    ret ($patch_bank_surface_logic_location)
}

/*
 * This is the only function that should be called externally.
 * Generate patch cards for each modules
 *
 * Input:
 *   - $app_setting     : Application setting container
 *   - $module_vec      : Vector of module
 * Output:
 *   - Result: Err if the template is missing; else Ok
 */

/*pub*/ fn /*result<Ok, Err>*/ generate_patch_cards($app_setting, $module_vec){

    if $app_setting.export_as == SETTING_EXPORT_BANK{
        ret(Ok(new()))
    }

    sv_load( sv_mod_card, clear_sunvox_for_patch_cards ())

    $patch_card_template_location = get_patch_card_template_location()
    // logf("$app_setting.export_as: %d\n", $app_setting.export_as)
    // logf("$module_vec.size: %d\n", $module_vec.size)

    for ($i = 0; $i < $module_vec.size; $i + 1){

        // original implementation
        $cur_module      = $module_vec[$i]
        $cur_module_name = $module_vec[$i].name

        // logf("%d %s\n", $i, $cur_module_name)
        convert_individual_modules($patch_card_template_location, $i, $cur_module, $cur_module_name)
    }

    $patch_name = ""
    $patch_name[0] = 0
    sprintf($patch_name, "%s/%s %s", $app_setting.output_path, $app_setting.export_entity_name, "Patch Cards.sunvox")

    sv_save( sv_mod_card, $patch_name );
    ret(Ok(new()))
}

/*
 * convert each module controls into patch card controls
 *
 * Control Flow:
 *   The loop index will be started at 6
 *   but getting content from the module_vec by -6 offset (first content started at 0);
 *   For non-metamodules, a wrapper or a converter module must be used due to the current limitation of SunVox
 *   This will be further discussed once Acheney has returned to the SunVox community, 
 *   attempting to finding the better UX on these modules
 *
 * Input:
 *   - $patch_card_template_location: String
 *   - $idx                         : int
 *   - $cur_module                  : vector of module control
 *   - $cur_module_name             : String
 * Output:
 *   - void
 */

fn /*void*/ convert_individual_modules($patch_card_template_location, $idx, $cur_module, $cur_module_name, $cur_module_type){
    
    // get the location of the output module
    $module_coordinates = sv_get_module_xy(sv_mod_card, 0)  // 0 is always the output module
    $x_ini = ( $module_coordinates                     & LOW_WORD_MASK ) + X_POS_OFFSET
    $y_ini = (($module_coordinates >> WORD_SIZE_SHIFT) & LOW_WORD_MASK )

    // and the following modules
    $x = $x_ini + (floor($idx / ROWS_PER_COL) * X_POS_OFFSET)
    $y = $y_ini + (floor($idx % ROWS_PER_COL) * Y_POS_OFFSET)

    $module_id = sv_load_module(sv_mod_card, $patch_card_template_location, $x, $y)
    //logf("$module_id: %d %s\n", $module_id, $cur_module_name)
    
    // Construct module name for patch cards
    $patch_name = ""
    $patch_name[0] = 0
    sprintf($patch_name, "CARD %d %s", $idx, $cur_module_name)

    // limit module name to 32 characters, technically a sub string function
    // without limiting the string length, the name simply won't be written on the module
    $patch_name[32] = 0
    sv_set_module_name( sv_mod_card, $module_id, $patch_name )
    
    for ($i = 0; $i < $cur_module.ctrls.size; $i + 1){
        sv_set_module_ctl_value( sv_mod_card, $module_id, $i + META_CTRL_OFFSET, $cur_module.ctrls[$i], PATTERN_COL_SCALE )
    }

    for ($i = 0; $i < $cur_module.ctrls.size; $i + 1){
        
        $current_ctrl_value = 0

        // have to use a spin lock here; otherwise, sv_set_module_ctl_value don't have enough time to 
        // set all the ctrls before saving the sunvox project
        while ($current_ctrl_value != $cur_module.ctrls[$i]) {
            $current_ctrl_value = sv_get_module_ctl_value(sv_mod_card, $module_id, $i + META_CTRL_OFFSET, PATTERN_COL_SCALE )
            sleep(SPINLOCK_WAIT_TIME) // sleep is applied, hopefully this can reduce the CPU usage
        } 
    }
}
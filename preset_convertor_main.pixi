// *************************************************************************************************************
// Preset bank generator mk2
// 
// We (Acheney and Logickin) decided to make use of pixilang to build a program,
// to provide an eco-system for managing presents, with maximizing the advantage of the preset standards:
// 
// Including:
// - Patch Cards: Inspired by the accipiter preset module, Acheney expended the functionality
//		by adding presents export into their modules, so that user can export their presets
//		into the Acheney preset on the fly.
//
// - Patch Banks: Taking the compression into extreme, Logickin made a former program for
//	 	fitting all the preset data into a pattern, result in a highly compact, BUT immutable
// 		preset bank module. Ideal for user who just want to quickly switching the sound by keypresses.
// 	
// Ultmately, we will merge the two standards into one if SunVox provides update
// like writing into patterns inside metamodules on project play, 
// or supporting pixilang in SunVox, which is not possible at the moment.
//
// *************************************************************************************************************

// pixi file dependencies
include "lib/lkups/app_msgs.pixi"
include "lib/models/app_setting.pixi"

include "lib/utils/show_log.pixi"
include "lib/utils/vector.pixi"
include "lib/utils/string_utils.pixi"
include "lib/utils/result_utils.pixi"

include "lib/gui/components/color_utils.pixi"
include "lib/gui/components/GUI.pixi"
include "lib/gui/components/button.pixi"
include "lib/gui/components/checkbox.pixi"
include "lib/gui/components/gui_window_frame.pixi"
include "lib/gui/components/text_message.pixi"
include "lib/gui/popup.pixi"
include "lib/gui/preset_converter_options.pixi"
include "lib/gui/preset_converter_pager.pixi"

include "lib/validations/preset_converter_options_validator.pixi"

include "lib/modules_extraction/module_extractor.pixi"

include "lib/patches_generation/directory_generator.pixi"
include "lib/patches_generation/patch_cards_generator.pixi"


// 1. Start of the program, loading config if necessary, and
// Loading any global instance here, this is where SunVox instances and Lookup tables should be located
// Other than that, they should all be local variables

// App messages
APP_MSGS = app_msgs_lkup_new()

// SunVox instances
sv_mod_extr = sv_new()
sv_mod_card = sv_new()


main() halt 

fn /*void*/ main(){
	// main program, containing:

	// 2. Function calls for front end of the program, drawing the ui or some demoscenes (if necessary)
	$options_gui = construct_preset_converter_options_gui()
	$app_setting = new()

	// Main event loop
	while 1 {
		$app_setting = display_settings_and_validation($options_gui)

		// 3&4. Function calls for file extractions and validations
		$extr_result = extract_modules_into_sunvox($app_setting)
		//debug_module_extractor($extr_result)

		// 5&6: Function calls for generating and exporting presets
		if Ok($extr_result) {
			create_directories_by_setting($app_setting)
			generate_patch_cards($app_setting, Ok_parse($extr_result))
		}

		// 7. function calls for front end of the program, drawing the ui or some demoscenes (if necessary)
		// Function calls...

		break; // Temporary, well be removed once other part of the code have completed
	}

	// Debug function locates here
	// create_directories_by_setting(app_setting_debug_new())

	show_log()	// This is only for debug purpose
}

/*
 * Since there is no good way to do unit test using pixilang,
 * this function is to provide a visual feedback for tracing issue during module extraction
 */
fn /*void*/ debug_module_extractor($extr_result){
	
	if Ok($extr_result) {
		logf(" Export is Ok\n")
		$modules = Ok_parse($extr_result)

		logf("found %d modules\n"  , $modules.size)

		for ($i = 0; $i < $modules.size; $i + 1){

			logf("\nmodule name: %s\n",  $modules[$i].name)
			$ctrl_group = $modules[$i].ctrls
			
			for ($j = 0; $j < $ctrl_group.size; $j + 1){

				logf("%d controller_name: %s "  , $j , $modules.desc[$j])
    			logf("module_type: %d\n",  $ctrl_group[$j])

			}
		}
	}

	if Err($extr_result) {
		logf(" Export With Error\n")
		$err_msgs = Err_parse($extr_result)

		logf("found %d errors\n"  , $err_msgs.size)

		for ($i = 0; $i < $err_msgs.size; $i + 1){
			$msg = $err_msgs[$i]
			logf("%d Msg: %s \n"  , $i , $msg)
		}
	}
}